# -*- coding: utf-8 -*-
"""Transparence TP1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ssaX6EYGj0YmJWJxQoYTDlsAS-Xyv3cR

Code du TP1
"""

import math


critiques = {"Lisa Rose" : { "Lady" : 2.5, "Snakes" : 3.5, "Luck" : 3.0, "Superman" : 3.5, "Dupree" : 2.5, "Night" : 3.0},
             "Gene Seymour" : { "Lady" : 3.0, "Snakes" : 3.5, "Luck" : 1.5, "Superman" : 5.0, "Dupree" : 3.5, "Night" : 3.0},
             "Michael Phillips" : { "Lady" : 2.5, "Snakes" : 3.0, "Luck" : "vide", "Superman" : 3.5, "Dupree" : "vide", "Night" : 4.0},
             "Claudia Puig" : { "Lady" : "vide", "Snakes" : 3.5, "Luck" : 3.0, "Superman" : 4.0, "Dupree" : 2.5, "Night" : 4.5},
             "Mick Lasalle" : { "Lady" : 3.0, "Snakes" : 4.0, "Luck" : 2.0, "Superman" : 3.0, "Dupree" : 2.0, "Night" : 3.0},
             "Jack Matthews" : { "Lady" : 3.0, "Snakes" : 4.0, "Luck" : "vide", "Superman" : 5.0, "Dupree" : 3.5, "Night" : 3.0},
             "Toby" : { "Lady" : "vide", "Snakes" : 4.5, "Luck" : "vide", "Superman" : 4.0, "Dupree" : 1.0, "Night" : "vide"},
}
Anne = { "Lady" : 1.5, "Snakes" :"vide", "Luck" : 4.0, "Superman" : "vide", "Dupree" : 2.0, "Night" : "vide"}

critiques["Anne"] = Anne


#Distance de Manhattan
def sim_distanceManhattan(personne1,personne2):
  res = 0
  for film in critiques[personne1]:
    if((critiques[personne1][film] != "vide")) and ((critiques[personne2][film] != "vide")):
      res+= abs( critiques[personne1][film] - critiques[personne2][film] )
  return res


#Distance Euclidienne
def sim_distanceEuclidienne(personne1, personne2):
  res = 0
  for film in critiques[personne1]:
    if((critiques[personne1][film] != "vide")) and ((critiques[personne2][film] != "vide")):
      res+= ( critiques[personne1][film] - critiques[personne2][film] ) ** 2
  return math.sqrt(res)

print("**************************************************************")
print("Distance de Manhattan entre Toby et Lisa Rose",sim_distanceManhattan("Toby","Lisa Rose"))
print("Distance Euclidienne entre Lisa Rose et Anne",sim_distanceEuclidienne("Lisa Rose", "Anne"))


#Recommend en utilisant la distance de Manhattan
def computeNearestNeighbor_Manhattan(nouveauCritique):
  distances=[]
  for critiqueCourant in critiques:
    if critiqueCourant!=nouveauCritique:
      distance=sim_distanceManhattan(critiqueCourant,nouveauCritique)
      distances.append((distance,critiqueCourant))
  distances.sort()
  return distances


def recommand_Manhattan(nomCritique):
  #Je commence par récuperer les films non vus par le critique
  filmsNonVus = []
  for film in critiques[nomCritique]:
    if(critiques[nomCritique][film] == "vide"):
      filmsNonVus.append(film)
  if(len(filmsNonVus) == 0):
    return 'Cette personne a vu tous les films disponibles'
  #Ensuite je calcule la liste des critiques qui ont les memes gout que notre critique
  neighbors = computeNearestNeighbor_Manhattan(nomCritique)
  #Je vérifie que le voisin le plus proche a vu des films non vus par notre critique, sinon je passe au voisin suivant
  aig = False
  i =0
  res = []
  while(aig != True and i < 8):
    for film in filmsNonVus:
      if(critiques[neighbors[i][1]][film] != "vide"):
        aig = True
        res.append({film : critiques[neighbors[i][1]][film]})
    if(len(res) == 0):
      i+=1
  if(i==8):
    return 'Aucun critique n a vu les films non vus par notre critique'
  return res

print("---------------------------------------------------")
print("Voisins de Anne",computeNearestNeighbor_Manhattan("Anne"))
print("Recommend (Manhattan) pour Anne",recommand_Manhattan("Anne"))

#Meme code seulement cette fois j'utilise la distance euclidienne
#Recommend en utilisant la distance Euclidienne
def computeNearestNeighbor_Euclidienne(nouveauCritique):
  distances=[]
  for critiqueCourant in critiques:
    if critiqueCourant!=nouveauCritique:
      distance=sim_distanceEuclidienne(critiqueCourant,nouveauCritique)
      distances.append((distance,critiqueCourant))
  distances.sort()
  return distances


def recommand_Euclidienne(nomCritique):
  #Je commence par récuperer les films non vus par le critique
  filmsNonVus = []
  for film in critiques[nomCritique]:
    if(critiques[nomCritique][film] == "vide"):
      filmsNonVus.append(film)
  if(len(filmsNonVus) == 0):
    return 'Cette personne a vu tous les films disponibles'
  #Ensuite je calcule la liste des critiques qui ont les memes gout que notre critique
  neighbors = computeNearestNeighbor_Euclidienne(nomCritique)
  #Je vérifie que le voisin le plus proche a vu des films non vus par notre critique, sinon je passe au voisin suivant
  aig = False
  i =0
  res = []
  while(aig != True and i < 8):
    for film in filmsNonVus:
      if(critiques[neighbors[i][1]][film] != "vide"):
        aig = True
        res.append({film : critiques[neighbors[i][1]][film]})
    if(len(res) == 0):
      i+=1
  if(i==8):
    return 'Aucun critique n a vu les films non vus par notre critique'
  return res

#print(computeNearestNeighbor_Euclidienne("Michael Phillips"))
#print(recommand_Euclidienne("Michael Phillips"))



#Question à pauser aux camarades : lors du calcul du total(a) quelle distance allons nous utiliser?
def total(filmA):
  #Je commence par chercher les critiques qui ont vu le film A
  listCritiquesVusFilmA = []
  for critique in critiques:
    if(critiques[critique][filmA] != "vide"):
      listCritiquesVusFilmA.append(critique)
  #Ensuite je calcule total(a)
  res = 0
  for critique in listCritiquesVusFilmA:
    res+= critiques[critique][filmA] / (1 + sim_distanceManhattan(critique,"Anne"))
  return res

def s(filmA):
  #Je commence par chercher les critiques qui ont vu le film A
  listCritiquesVusFilmA = []
  for critique in critiques:
    if(critiques[critique][filmA] != "vide"):
      listCritiquesVusFilmA.append(critique)
  #Ensuite je calcule total(a)
  res = 0
  for critique in listCritiquesVusFilmA:
    res+= 1 / (1 + sim_distanceManhattan(critique,"Anne"))
  return res

def sPrime(filmA):
  return total(filmA) / s(filmA)

print("---------------------------------------------------")
print("total(Night) = ", total("Night"))
print("s(Night) = ", s("Night"))
print("sPrime(Night) =", sPrime("Night"))

def bestRecommend():
  #Je commence par chercher les films non vus par Anne
  filmsNonVus = []
  for film in Anne:
    if Anne[film] == "vide":
      filmsNonVus.append(film)
  #Ensuite je cherche le film avec la plus grande valeur de sPrime
  sPrimeMax = 0
  for film in filmsNonVus:
    if sPrimeMax < sPrime(film):
      sPrimeMax = sPrime(film)
      res = film
  return res

print("Le film a recommandé à Anne est", bestRecommend())

def pearson(person1, person2):
  sum_xy=0
  sum_x=0
  sum_y=0
  sum_x2=0
  sum_y2=0
  n=0
  for film in critiques[person1]:
    if ((critiques[person1][film] != "vide") and (critiques[person2][film] != "vide")):
      n += 1
      x=critiques[person1][film]
      y=critiques[person2][film]
      sum_xy +=x*y
      sum_x += x
      sum_y += y
      sum_x2 += x**2
      sum_y2 += y**2
  denominator = math.sqrt(sum_x2 - (sum_x**2) / n) *math.sqrt(sum_y2 - (sum_y**2) / n)
  if denominator == 0:
    return 0
  else:
    return (sum_xy - (sum_x * sum_y) /n ) / denominator
print("**************************************************************")
print("Pearson de Gene Seymour et Anne",pearson("Anne","Gene Seymour"))

#Ici je dessine le graphe de points des notes des deux critiques 'Mick Lasalle' et 'Gene Seymour'
import matplotlib.pyplot as plt
XMick = []
YGene = []
for film in critiques["Mick Lasalle"]:
  XMick.append(critiques["Mick Lasalle"][film])
for film in critiques["Gene Seymour"]:
  YGene.append(critiques["Gene Seymour"][film])
plt.plot(XMick,YGene,"ro")
print(pearson("Mick Lasalle", "Gene Seymour"))

def pearsonRecommend(nomPersonne):
  coefPear = -1
  nomVoisin = ""
  #Je recherche la personne qui a le plus grand coefficient de Pearson avec la personne "nomPersonne" et je la stocke dans "nomVoisin"
  for critique in critiques:
    if critique != nomPersonne:
      if coefPear < pearson(critique,nomPersonne):
        coefPear = pearson(critique,nomPersonne)
        nomVoisin = critique
  #Je parcours les films non vus par "nomPersonne" et je prends le film avec la plus grande note attribuée par la personne "nomVoisin"
  meilleureNote = 0.0
  filmPropose = "Vous avez tout vu"
  for film in critiques[nomPersonne]:
    if critiques[nomPersonne][film] == "vide":
      if meilleureNote < critiques[nomVoisin][film]:
        meilleureNote = critiques[nomVoisin][film]
        filmPropose = film
  return filmPropose

print("***********************************************************************************")
print("Le film recommendé à Anne selon le coefficient de Pearson est : ",pearsonRecommend("Anne"))

def cosinus(person1, person2):
  sum_xy=0
  sum_x=0
  sum_y=0
  sum_x2=0
  sum_y2=0
  n=0
  for film in critiques[person1]:
    if ((critiques[person1][film] != "vide") and (critiques[person2][film] != "vide")):
      n += 1
      x=critiques[person1][film]
      y=critiques[person2][film]
      sum_xy +=x*y
      sum_x += x
      sum_y += y
      sum_x2 += x**2
      sum_y2 += y**2
  denominator = math.sqrt(sum_x2) *math.sqrt(sum_y2) 
  if denominator == 0:
    return 0
  else:
    return sum_xy  / denominator

def cosinusRecommend(nomPersonne):
  coefCos = -1
  nomVoisin = ""
  #Je recherche la personne qui a le plus grand coefficient Cosinus avec la personne "nomPersonne" et je la stocke dans "nomVoisin"
  for critique in critiques:
    if critique != nomPersonne:
      if coefCos < pearson(critique,nomPersonne):
        coefCos = pearson(critique,nomPersonne)
        nomVoisin = critique
  #Je parcours les films non vus par "nomPersonne" et je prends le film avec la plus grande note attribuée par la personne "nomVoisin"
  meilleureNote = 0.0
  filmPropose = "Vous avez tout vu"
  for film in critiques[nomPersonne]:
    if critiques[nomPersonne][film] == "vide":
      if meilleureNote < critiques[nomVoisin][film]:
        meilleureNote = critiques[nomVoisin][film]
        filmPropose = film
  return filmPropose

print("-----------------------------------------------------------------------------------")
print("Le film recommendé à Anne selon le coefficient de Cosinus est : ",cosinusRecommend("Anne"))


critiques = {"Lisa Rose" : { "Lady" : 1.5, "Snakes" : 4.145, "Luck" : 3.5, "Superman" : 4.146, "Dupree" : 1.5, "Night" : 1.5},
             "Gene Seymour" : { "Lady" : 1.0, "Snakes" : 4.5, "Luck" : 4.5, "Superman" : 1.0, "Dupree" : 2.5, "Night" : 5.0},
             "Michael Phillips" : { "Lady" : 1.5, "Snakes" : 1.0, "Luck" : 3.5, "Superman" : 1.5, "Dupree" : 2.5, "Night" : 5.0},
             "Claudia Puig" : { "Lady" : 2.0, "Snakes" : 1.0, "Luck" : 2.5, "Superman" : 1.0, "Dupree" : 2.5, "Night" : 5.0},
             "Mick Lasalle" : { "Lady" : 3.0, "Snakes" : 4.5, "Luck" : 2.0, "Superman" : 1.0, "Dupree" : 2.0, "Night" : 4.0},
             "Jack Matthews" : { "Lady" : 1.6, "Snakes" : 4.5, "Luck" : 4.1, "Superman" : 4.05, "Dupree" : 2.0, "Night" : 2.0},
             "Toby" : { "Lady" : 1.4, "Snakes" : 2.0, "Luck" : 3.9, "Superman" : 4.4999, "Dupree" : 2.0, "Night" : 3.5},
}
Anne = { "Lady" : 1.5, "Snakes" :"vide", "Luck" : 4.0, "Superman" : "vide", "Dupree" : 2.0, "Night" : "vide"}

critiques["Anne"] = Anne

print("*////////////////////////////////////////////////////////////////////////")
#
print("Le film recommendé à Anne selon bestRecommend est : ",bestRecommend())
print("Le film recommendé à Anne selon le coefficient de Pearson est : ",pearsonRecommend("Anne"))
print("Le film recommendé à Anne selon le coefficient de Cosinus est : ",cosinusRecommend("Anne"))